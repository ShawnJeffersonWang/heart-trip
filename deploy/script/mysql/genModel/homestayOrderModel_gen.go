// Code generated by goctl. DO NOT EDIT.

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	homestayOrderFieldNames          = builder.RawFieldNames(&HomestayOrder{})
	homestayOrderRows                = strings.Join(homestayOrderFieldNames, ",")
	homestayOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(homestayOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	homestayOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(homestayOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHeartTripOrderHomestayOrderIdPrefix = "cache:heartTripOrder:homestayOrder:id:"
	cacheHeartTripOrderHomestayOrderSnPrefix = "cache:heartTripOrder:homestayOrder:sn:"
)

type (
	homestayOrderModel interface {
		Insert(ctx context.Context, data *HomestayOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HomestayOrder, error)
		FindOneBySn(ctx context.Context, sn string) (*HomestayOrder, error)
		Update(ctx context.Context, data *HomestayOrder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHomestayOrderModel struct {
		sqlc.CachedConn
		table string
	}

	HomestayOrder struct {
		Id                 int64     `db:"id"`
		CreateTime         time.Time `db:"create_time"`
		UpdateTime         time.Time `db:"update_time"`
		DeleteTime         time.Time `db:"delete_time"`
		DelState           int64     `db:"del_state"`
		Version            int64     `db:"version"`              // 版本号
		Sn                 string    `db:"sn"`                   // 订单号
		UserId             int64     `db:"user_id"`              // 下单用户id
		HomestayId         int64     `db:"homestay_id"`          // 民宿id
		Title              string    `db:"title"`                // 标题
		Cover              string    `db:"cover"`                // 封面
		Info               string    `db:"info"`                 // 介绍
		HomestayPrice      int64     `db:"homestay_price"`       // 民宿价格(分)
		HomestayBusinessId int64     `db:"homestay_business_id"` // 店铺id
		HomestayUserId     int64     `db:"homestay_user_id"`     // 店铺房东id
		LiveStartDate      time.Time `db:"live_start_date"`      // 开始入住日期
		LiveEndDate        time.Time `db:"live_end_date"`        // 结束入住日期
		TradeState         int64     `db:"trade_state"`          // -1: 已取消 0:待支付 1:未使用 2:已使用  3:已退款 4:已过期
		TradeCode          string    `db:"trade_code"`           // 确认码
		Remark             string    `db:"remark"`               // 用户下单备注
		OrderTotalPrice    int64     `db:"order_total_price"`    // 订单总价格（餐食总价格+民宿总价格）(分)
		HomestayTotalPrice int64     `db:"homestay_total_price"` // 民宿总价格(分)
	}
)

func newHomestayOrderModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHomestayOrderModel {
	return &defaultHomestayOrderModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`homestay_order`",
	}
}

func (m *defaultHomestayOrderModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	heartTripOrderHomestayOrderIdKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderIdPrefix, id)
	heartTripOrderHomestayOrderSnKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderSnPrefix, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, heartTripOrderHomestayOrderIdKey, heartTripOrderHomestayOrderSnKey)
	return err
}

func (m *defaultHomestayOrderModel) FindOne(ctx context.Context, id int64) (*HomestayOrder, error) {
	heartTripOrderHomestayOrderIdKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderIdPrefix, id)
	var resp HomestayOrder
	err := m.QueryRowCtx(ctx, &resp, heartTripOrderHomestayOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", homestayOrderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHomestayOrderModel) FindOneBySn(ctx context.Context, sn string) (*HomestayOrder, error) {
	heartTripOrderHomestayOrderSnKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderSnPrefix, sn)
	var resp HomestayOrder
	err := m.QueryRowIndexCtx(ctx, &resp, heartTripOrderHomestayOrderSnKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `sn` = ? limit 1", homestayOrderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sn); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHomestayOrderModel) Insert(ctx context.Context, data *HomestayOrder) (sql.Result, error) {
	heartTripOrderHomestayOrderIdKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderIdPrefix, data.Id)
	heartTripOrderHomestayOrderSnKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderSnPrefix, data.Sn)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, homestayOrderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Sn, data.UserId, data.HomestayId, data.Title, data.Cover, data.Info, data.HomestayPrice, data.HomestayBusinessId, data.HomestayUserId, data.LiveStartDate, data.LiveEndDate, data.TradeState, data.TradeCode, data.Remark, data.OrderTotalPrice, data.HomestayTotalPrice)
	}, heartTripOrderHomestayOrderIdKey, heartTripOrderHomestayOrderSnKey)
	return ret, err
}

func (m *defaultHomestayOrderModel) Update(ctx context.Context, newData *HomestayOrder) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	heartTripOrderHomestayOrderIdKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderIdPrefix, data.Id)
	heartTripOrderHomestayOrderSnKey := fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderSnPrefix, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, homestayOrderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Sn, newData.UserId, newData.HomestayId, newData.Title, newData.Cover, newData.Info, newData.HomestayPrice, newData.HomestayBusinessId, newData.HomestayUserId, newData.LiveStartDate, newData.LiveEndDate, newData.TradeState, newData.TradeCode, newData.Remark, newData.OrderTotalPrice, newData.HomestayTotalPrice, newData.Id)
	}, heartTripOrderHomestayOrderIdKey, heartTripOrderHomestayOrderSnKey)
	return err
}

func (m *defaultHomestayOrderModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHeartTripOrderHomestayOrderIdPrefix, primary)
}

func (m *defaultHomestayOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", homestayOrderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHomestayOrderModel) tableName() string {
	return m.table
}
