// Code generated by goctl. DO NOT EDIT.

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	historyFieldNames          = builder.RawFieldNames(&History{})
	historyRows                = strings.Join(historyFieldNames, ",")
	historyRowsExpectAutoSet   = strings.Join(stringx.Remove(historyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	historyRowsWithPlaceHolder = strings.Join(stringx.Remove(historyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHeartTripTravelHistoryIdPrefix = "cache:heartTripTravel:history:id:"
)

type (
	historyModel interface {
		Insert(ctx context.Context, data *History) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*History, error)
		Update(ctx context.Context, data *History) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHistoryModel struct {
		sqlc.CachedConn
		table string
	}

	History struct {
		Id                 int64     `db:"id"`
		CreateTime         time.Time `db:"create_time"`
		LastBrowsingTime   time.Time `db:"last_browsing_time"`
		Title              string    `db:"title"`
		Cover              string    `db:"cover"`
		Intro              string    `db:"intro"`
		Location           string    `db:"location"`
		PriceBefore        int64     `db:"price_before"`
		PriceAfter         int64     `db:"price_after"`
		RowState           int64     `db:"row_state"`
		HomestayBusinessId int64     `db:"homestay_business_id"`
		RatingStars        float64   `db:"rating_stars"`
		UserId             int64     `db:"user_id"`
		HomestayId         int64     `db:"homestay_id"`
		DelState           int64     `db:"del_state"`
		Version            int64     `db:"version"`
		DeleteTime         time.Time `db:"delete_time"`
	}
)

func newHistoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHistoryModel {
	return &defaultHistoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`history`",
	}
}

func (m *defaultHistoryModel) Delete(ctx context.Context, id int64) error {
	heartTripTravelHistoryIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHistoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, heartTripTravelHistoryIdKey)
	return err
}

func (m *defaultHistoryModel) FindOne(ctx context.Context, id int64) (*History, error) {
	heartTripTravelHistoryIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHistoryIdPrefix, id)
	var resp History
	err := m.QueryRowCtx(ctx, &resp, heartTripTravelHistoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", historyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHistoryModel) Insert(ctx context.Context, data *History) (sql.Result, error) {
	heartTripTravelHistoryIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHistoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, historyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LastBrowsingTime, data.Title, data.Cover, data.Intro, data.Location, data.PriceBefore, data.PriceAfter, data.RowState, data.HomestayBusinessId, data.RatingStars, data.UserId, data.HomestayId, data.DelState, data.Version, data.DeleteTime)
	}, heartTripTravelHistoryIdKey)
	return ret, err
}

func (m *defaultHistoryModel) Update(ctx context.Context, data *History) error {
	heartTripTravelHistoryIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHistoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, historyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LastBrowsingTime, data.Title, data.Cover, data.Intro, data.Location, data.PriceBefore, data.PriceAfter, data.RowState, data.HomestayBusinessId, data.RatingStars, data.UserId, data.HomestayId, data.DelState, data.Version, data.DeleteTime, data.Id)
	}, heartTripTravelHistoryIdKey)
	return err
}

func (m *defaultHistoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHeartTripTravelHistoryIdPrefix, primary)
}

func (m *defaultHistoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", historyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHistoryModel) tableName() string {
	return m.table
}
