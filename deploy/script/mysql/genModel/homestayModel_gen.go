// Code generated by goctl. DO NOT EDIT.

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	homestayFieldNames          = builder.RawFieldNames(&Homestay{})
	homestayRows                = strings.Join(homestayFieldNames, ",")
	homestayRowsExpectAutoSet   = strings.Join(stringx.Remove(homestayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	homestayRowsWithPlaceHolder = strings.Join(stringx.Remove(homestayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHeartTripTravelHomestayIdPrefix = "cache:heartTripTravel:homestay:id:"
)

type (
	homestayModel interface {
		Insert(ctx context.Context, data *Homestay) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Homestay, error)
		Update(ctx context.Context, data *Homestay) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHomestayModel struct {
		sqlc.CachedConn
		table string
	}

	Homestay struct {
		Id                 int64     `db:"id"`
		CreateTime         time.Time `db:"create_time"`
		UpdateTime         time.Time `db:"update_time"`
		DeleteTime         time.Time `db:"delete_time"`
		DelState           int64     `db:"del_state"`
		Version            int64     `db:"version"`      // 版本号
		Title              string    `db:"title"`        // 标题
		RatingStars        float64   `db:"rating_stars"` // 评分
		BannerUrls         string    `db:"banner_urls"`
		TitleTags          string    `db:"title_tags"`
		CommentCount       int64     `db:"comment_count"`
		Location           string    `db:"location"` // 位置
		Latitude           int64     `db:"latitude"`
		Longitude          int64     `db:"longitude"`
		Facilities         string    `db:"facilities"`
		Cover              string    `db:"cover"` // 轮播图，第一张封面
		Area               string    `db:"area"`
		RoomConfig         string    `db:"room_config"` // 介绍
		CleanVideo         string    `db:"clean_video"`
		HomestayBusinessId int64     `db:"homestay_business_id"` // 民宿店铺id
		HostId             int64     `db:"host_id"`              // 房东id，冗余字段
		HostAvatar         string    `db:"host_avatar"`
		HostNickname       string    `db:"host_nickname"`
		RowState           int64     `db:"row_state"`    // 0:下架 1:上架
		PriceBefore        int64     `db:"price_before"` // 民宿价格（分）
		PriceAfter         int64     `db:"price_after"`
	}
)

func newHomestayModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHomestayModel {
	return &defaultHomestayModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`homestay`",
	}
}

func (m *defaultHomestayModel) Delete(ctx context.Context, id int64) error {
	heartTripTravelHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHomestayIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, heartTripTravelHomestayIdKey)
	return err
}

func (m *defaultHomestayModel) FindOne(ctx context.Context, id int64) (*Homestay, error) {
	heartTripTravelHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHomestayIdPrefix, id)
	var resp Homestay
	err := m.QueryRowCtx(ctx, &resp, heartTripTravelHomestayIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", homestayRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHomestayModel) Insert(ctx context.Context, data *Homestay) (sql.Result, error) {
	heartTripTravelHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHomestayIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, homestayRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Title, data.RatingStars, data.BannerUrls, data.TitleTags, data.CommentCount, data.Location, data.Latitude, data.Longitude, data.Facilities, data.Cover, data.Area, data.RoomConfig, data.CleanVideo, data.HomestayBusinessId, data.HostId, data.HostAvatar, data.HostNickname, data.RowState, data.PriceBefore, data.PriceAfter)
	}, heartTripTravelHomestayIdKey)
	return ret, err
}

func (m *defaultHomestayModel) Update(ctx context.Context, data *Homestay) error {
	heartTripTravelHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelHomestayIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, homestayRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Title, data.RatingStars, data.BannerUrls, data.TitleTags, data.CommentCount, data.Location, data.Latitude, data.Longitude, data.Facilities, data.Cover, data.Area, data.RoomConfig, data.CleanVideo, data.HomestayBusinessId, data.HostId, data.HostAvatar, data.HostNickname, data.RowState, data.PriceBefore, data.PriceAfter, data.Id)
	}, heartTripTravelHomestayIdKey)
	return err
}

func (m *defaultHomestayModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHeartTripTravelHomestayIdPrefix, primary)
}

func (m *defaultHomestayModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", homestayRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHomestayModel) tableName() string {
	return m.table
}
