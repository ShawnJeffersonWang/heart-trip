// Code generated by goctl. DO NOT EDIT.

package bck

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"heart-trip/app/travel/model"
	"heart-trip/common/globalkey"
	"heart-trip/deploy/script/mysql/genModel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userHomestayFieldNames          = builder.RawFieldNames(&UserHomestay{})
	userHomestayRows                = strings.Join(userHomestayFieldNames, ",")
	userHomestayRowsExpectAutoSet   = strings.Join(stringx.Remove(userHomestayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userHomestayRowsWithPlaceHolder = strings.Join(stringx.Remove(userHomestayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHeartTripTravelUserHomestayIdPrefix = "cache:heartTripTravel:userHomestay:id:"
)

type (
	userHomestayModel interface {
		Insert(ctx context.Context, data *UserHomestay) (sql.Result, error)
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		FindOneByUserIdAndHomestayId(ctx context.Context, user_id, homestay_id int64) (*UserHomestay, error)
		FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*UserHomestay, error)
		Update(ctx context.Context, data *UserHomestay) error
		Delete(ctx context.Context, user_id, homestay_id int64) error
		DeleteSoft(ctx context.Context, session sqlx.Session, data *UserHomestay) error
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserHomestay) error
	}

	defaultUserHomestayModel struct {
		sqlc.CachedConn
		table string
	}

	UserHomestay struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`
		HomestayId int64     `db:"homestay_id"`
		DelState   int64     `db:"del_state"`
		Version    int64     `db:"version"`
		DeleteTime time.Time `db:"delete_time"`
	}
)

func newUserHomestayModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserHomestayModel {
	return &defaultUserHomestayModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_homestay`",
	}
}

func (m *defaultUserHomestayModel) Delete(ctx context.Context, user_id, homestay_id int64) error {
	heartTripTravelUserHomestayIdKey := fmt.Sprintf("%s%v%v", cacheHeartTripTravelUserHomestayIdPrefix, user_id, homestay_id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ? and `homestay_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, user_id, homestay_id)
	}, heartTripTravelUserHomestayIdKey)
	return err
}

func (m *defaultUserHomestayModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *UserHomestay) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteTime = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), " delete err : %+v", err)
	}
	fmt.Println("00000000000000000000")
	return nil
}

func (m *defaultUserHomestayModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *UserHomestay) error {

	oldVersion := data.Version
	data.Version += 1

	var sqlResult sql.Result
	var err error

	heartTripTravelUserHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelUserHomestayIdPrefix, data.Id)
	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, userHomestayRowsWithPlaceHolder)
		if session != nil {
			// bug: update语句的每个字段都要有，之前是没有data.Version
			return session.ExecCtx(ctx, query, data.UserId, data.HomestayId, data.DelState, data.Version, data.DeleteTime, data.Id, oldVersion)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.HomestayId, data.DelState, data.Version, data.DeleteTime, data.Id, oldVersion)
	}, heartTripTravelUserHomestayIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return genModel.ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultUserHomestayModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultUserHomestayModel) FindOneByUserIdAndHomestayId(ctx context.Context, user_id, homestay_id int64) (*UserHomestay, error) {
	//heartTripTravelUserHomestayIdKey := fmt.Sprintf("%s%v%v", cacheHeartTripTravelUserHomestayIdPrefix, user_id, homestay_id)
	var resp UserHomestay
	//err := m.QueryRowCtx(ctx, &resp, heartTripTravelUserHomestayIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
	//	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `homestay_id` = ? limit 1", userHomestayRows, m.table)
	//	return conn.QueryRowCtx(ctx, v, query, user_id, homestay_id)
	//})

	// FindOne里面查询不能带缓存会导致再次添加相同的名宿id可以成功，会出现缓存不一致的问题
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `homestay_id` = ? limit 1", userHomestayRows, m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, user_id, homestay_id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserHomestayModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*UserHomestay, error) {

	builder = builder.Columns(userHomestayRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("").ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserHomestay
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
	//heartTripTravelUserHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelUserHomestayIdPrefix, userId)
	//fmt.Println("heartTripTravelUserHomestayIdKey",heartTripTravelUserHomestayIdKey)
	//var resp []*UserHomestay
	//err := m.QueryRowCtx(ctx, &resp, heartTripTravelUserHomestayIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
	//	query := fmt.Sprintf("select %s from %s where `user_id` = ?", userHomestayRows, m.table)
	//	fmt.Println("query:",query)
	//	return conn.QueryRowsCtx(ctx, v, query, userId)
	//})
	//switch err {
	//case nil:
	//	return resp, nil
	//case sqlc.ErrNotFound:
	//	return nil, ErrNotFound
	//default:
	//	return nil, err
	//}
}

func (m *defaultUserHomestayModel) Insert(ctx context.Context, data *UserHomestay) (sql.Result, error) {
	// bug 都没初始化就直接插入
	data.DeleteTime = time.Unix(0, 0)
	data.DelState = globalkey.DelStateNo
	heartTripTravelUserHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelUserHomestayIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userHomestayRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.HomestayId, data.DelState, data.Version, data.DeleteTime)
	}, heartTripTravelUserHomestayIdKey)
	return ret, err
}

func (m *defaultUserHomestayModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultUserHomestayModel) Update(ctx context.Context, data *UserHomestay) error {
	heartTripTravelUserHomestayIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelUserHomestayIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userHomestayRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.HomestayId, data.DelState, data.Version, data.DeleteTime, data.Id)
	}, heartTripTravelUserHomestayIdKey)
	return err
}

func (m *defaultUserHomestayModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHeartTripTravelUserHomestayIdPrefix, primary)
}

func (m *defaultUserHomestayModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userHomestayRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserHomestayModel) tableName() string {
	return m.table
}
