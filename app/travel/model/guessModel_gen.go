// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	guessFieldNames          = builder.RawFieldNames(&Guess{})
	guessRows                = strings.Join(guessFieldNames, ",")
	guessRowsExpectAutoSet   = strings.Join(stringx.Remove(guessFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	guessRowsWithPlaceHolder = strings.Join(stringx.Remove(guessFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHeartTripTravelGuessIdPrefix = "cache:heartTripTravel:guess:id:"
)

type (
	guessModel interface {
		Insert(ctx context.Context, data *Guess) (sql.Result, error)
		SelectBuilder() squirrel.SelectBuilder
		FindOne(ctx context.Context, id int64) (*Guess, error)
		Update(ctx context.Context, data *Guess) error
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Guess, error)
		Delete(ctx context.Context, id int64) error
	}

	defaultGuessModel struct {
		sqlc.CachedConn
		table string
	}

	Guess struct {
		Id          int64     `db:"id"`
		HomestayId  int64     `db:"homestay_id"`
		PriceAfter  int64     `db:"price_after"`
		// bug: 这里一定要加非空约束, 不然会出现sql.NullInt32, 非空约束也是最佳实践，可以优化性能
		PriceBefore int64     `db:"price_before"`
		Cover       string    `db:"cover"`
		Location    string    `db:"location"`
		Title       string    `db:"title"`
		IsCollected int64     `db:"is_collected"`
		UdateTime   time.Time `db:"udate_time"`
		CreateTime  time.Time `db:"create_time"`
	}
)

func newGuessModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGuessModel {
	return &defaultGuessModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`guess`",
	}
}

func (m *defaultGuessModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultGuessModel) Delete(ctx context.Context, id int64) error {
	heartTripTravelGuessIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelGuessIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, heartTripTravelGuessIdKey)
	return err
}

func (m *defaultGuessModel) FindOne(ctx context.Context, id int64) (*Guess, error) {
	heartTripTravelGuessIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelGuessIdPrefix, id)
	var resp Guess
	err := m.QueryRowCtx(ctx, &resp, heartTripTravelGuessIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", guessRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGuessModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Guess, error) {
	builder = builder.Columns(guessRows)
	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}
	query, values, err := builder.Where("").OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Guess
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultGuessModel) Insert(ctx context.Context, data *Guess) (sql.Result, error) {
	heartTripTravelGuessIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelGuessIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, guessRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.HomestayId, data.PriceAfter, data.PriceBefore, data.Cover, data.Location, data.Title, data.IsCollected, data.UdateTime)
	}, heartTripTravelGuessIdKey)
	return ret, err
}

func (m *defaultGuessModel) Update(ctx context.Context, data *Guess) error {
	heartTripTravelGuessIdKey := fmt.Sprintf("%s%v", cacheHeartTripTravelGuessIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, guessRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.HomestayId, data.PriceAfter, data.PriceBefore, data.Cover, data.Location, data.Title, data.IsCollected, data.UdateTime, data.Id)
	}, heartTripTravelGuessIdKey)
	return err
}

func (m *defaultGuessModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHeartTripTravelGuessIdPrefix, primary)
}

func (m *defaultGuessModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", guessRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGuessModel) tableName() string {
	return m.table
}
