// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package usercenter

import (
	"context"

	"heart-trip/app/usercenter/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Follow                             = pb.Follow
	GenerateTokenReq                   = pb.GenerateTokenReq
	GenerateTokenResp                  = pb.GenerateTokenResp
	GetUserAuthByAuthKeyReq            = pb.GetUserAuthByAuthKeyReq
	GetUserAuthByAuthKeyResp           = pb.GetUserAuthByAuthKeyResp
	GetUserAuthByUserIdReq             = pb.GetUserAuthByUserIdReq
	GetUserAuthyUserIdResp             = pb.GetUserAuthyUserIdResp
	GetUserInfoReq                     = pb.GetUserInfoReq
	GetUserInfoResp                    = pb.GetUserInfoResp
	LoginReq                           = pb.LoginReq
	LoginResp                          = pb.LoginResp
	QueryFollowsByFollowUserIDRequest  = pb.QueryFollowsByFollowUserIDRequest
	QueryFollowsByFollowUserIDResponse = pb.QueryFollowsByFollowUserIDResponse
	RegisterReq                        = pb.RegisterReq
	RegisterResp                       = pb.RegisterResp
	UpdateUserInfoReq                  = pb.UpdateUserInfoReq
	UpdateUserInfoResp                 = pb.UpdateUserInfoResp
	User                               = pb.User
	UserAuth                           = pb.UserAuth
	UserListReq                        = pb.UserListReq
	UserListResp                       = pb.UserListResp

	Usercenter interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error)
		GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
		UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
		QueryFollowsByFollowUserID(ctx context.Context, in *QueryFollowsByFollowUserIDRequest, opts ...grpc.CallOption) (*QueryFollowsByFollowUserIDResponse, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByAuthKey(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByUserId(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUsercenter) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

func (m *defaultUsercenter) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultUsercenter) QueryFollowsByFollowUserID(ctx context.Context, in *QueryFollowsByFollowUserIDRequest, opts ...grpc.CallOption) (*QueryFollowsByFollowUserIDResponse, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.QueryFollowsByFollowUserID(ctx, in, opts...)
}
